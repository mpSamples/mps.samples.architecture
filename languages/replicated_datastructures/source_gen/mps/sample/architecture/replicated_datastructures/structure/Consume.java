package mps.sample.architecture.replicated_datastructures.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Consume extends BaseConcept {
  public static final String concept = "mps.sample.architecture.replicated_datastructures.structure.Consume";
  public static final String REFERENCE = "reference";
  public static final String SPECIFICATION = "specification";

  public Consume(SNode node) {
    super(node);
  }

  public DatastructureReference getReference() {
    return (DatastructureReference)this.getChild(DatastructureReference.class, Consume.REFERENCE);
  }

  public void setReference(DatastructureReference node) {
    super.setChild(Consume.REFERENCE, node);
  }

  public int getSpecificationsCount() {
    return this.getChildCount(Consume.SPECIFICATION);
  }

  public Iterator<ReplicationSpecification> specifications() {
    return this.children(ReplicationSpecification.class, Consume.SPECIFICATION);
  }

  public List<ReplicationSpecification> getSpecifications() {
    return this.getChildren(ReplicationSpecification.class, Consume.SPECIFICATION);
  }

  public void addSpecification(ReplicationSpecification node) {
    this.addChild(Consume.SPECIFICATION, node);
  }

  public void insertSpecification(ReplicationSpecification prev, ReplicationSpecification node) {
    this.insertChild(prev, Consume.SPECIFICATION, node);
  }

  public static Consume newInstance(SModel sm, boolean init) {
    return (Consume)SModelUtil_new.instantiateConceptDeclaration("mps.sample.architecture.replicated_datastructures.structure.Consume", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Consume newInstance(SModel sm) {
    return Consume.newInstance(sm, false);
  }
}
