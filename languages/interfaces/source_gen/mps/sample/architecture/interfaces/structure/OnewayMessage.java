package mps.sample.architecture.interfaces.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class OnewayMessage extends Message {
  public static final String concept = "mps.sample.architecture.interfaces.structure.OnewayMessage";
  public static final String MESSAGE_PARAMETERS = "messageParameters";

  public OnewayMessage(SNode node) {
    super(node);
  }

  public int getMessageParametersesCount() {
    return this.getChildCount(OnewayMessage.MESSAGE_PARAMETERS);
  }

  public Iterator<MessageParameters> messageParameterses() {
    return this.children(MessageParameters.class, OnewayMessage.MESSAGE_PARAMETERS);
  }

  public List<MessageParameters> getMessageParameterses() {
    return this.getChildren(MessageParameters.class, OnewayMessage.MESSAGE_PARAMETERS);
  }

  public void addMessageParameters(MessageParameters node) {
    this.addChild(OnewayMessage.MESSAGE_PARAMETERS, node);
  }

  public void insertMessageParameters(MessageParameters prev, MessageParameters node) {
    this.insertChild(prev, OnewayMessage.MESSAGE_PARAMETERS, node);
  }

  public static OnewayMessage newInstance(SModel sm, boolean init) {
    return (OnewayMessage)SModelUtil_new.instantiateConceptDeclaration("mps.sample.architecture.interfaces.structure.OnewayMessage", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static OnewayMessage newInstance(SModel sm) {
    return OnewayMessage.newInstance(sm, false);
  }
}
