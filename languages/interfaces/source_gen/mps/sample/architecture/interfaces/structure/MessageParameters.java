package mps.sample.architecture.interfaces.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MessageParameters extends BaseConcept {
  public static final String concept = "mps.sample.architecture.interfaces.structure.MessageParameters";
  public static final String MESSAGE_PARAMETER = "messageParameter";

  public MessageParameters(SNode node) {
    super(node);
  }

  public int getMessageParametersCount() {
    return this.getChildCount(MessageParameters.MESSAGE_PARAMETER);
  }

  public Iterator<MessageParameter> messageParameters() {
    return this.children(MessageParameter.class, MessageParameters.MESSAGE_PARAMETER);
  }

  public List<MessageParameter> getMessageParameters() {
    return this.getChildren(MessageParameter.class, MessageParameters.MESSAGE_PARAMETER);
  }

  public void addMessageParameter(MessageParameter node) {
    this.addChild(MessageParameters.MESSAGE_PARAMETER, node);
  }

  public void insertMessageParameter(MessageParameter prev, MessageParameter node) {
    this.insertChild(prev, MessageParameters.MESSAGE_PARAMETER, node);
  }

  public static MessageParameters newInstance(SModel sm, boolean init) {
    return (MessageParameters)SModelUtil_new.instantiateConceptDeclaration("mps.sample.architecture.interfaces.structure.MessageParameters", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static MessageParameters newInstance(SModel sm) {
    return MessageParameters.newInstance(sm, false);
  }
}
