package mps.samples.architecture.types.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Struct extends BaseConcept implements INamedConcept {
  public static final String concept = "mps.samples.architecture.types.structure.Struct";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String STRUCT_MEMBER = "structMember";

  public Struct(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(Struct.NAME);
  }

  public void setName(String value) {
    this.setProperty(Struct.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Struct.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Struct.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Struct.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Struct.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Struct.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Struct.VIRTUAL_PACKAGE, value);
  }

  public int getStructMembersCount() {
    return this.getChildCount(Struct.STRUCT_MEMBER);
  }

  public Iterator<StructMember> structMembers() {
    return this.children(StructMember.class, Struct.STRUCT_MEMBER);
  }

  public List<StructMember> getStructMembers() {
    return this.getChildren(StructMember.class, Struct.STRUCT_MEMBER);
  }

  public void addStructMember(StructMember node) {
    this.addChild(Struct.STRUCT_MEMBER, node);
  }

  public void insertStructMember(StructMember prev, StructMember node) {
    this.insertChild(prev, Struct.STRUCT_MEMBER, node);
  }

  public static Struct newInstance(SModel sm, boolean init) {
    return (Struct)SModelUtil_new.instantiateConceptDeclaration("mps.samples.architecture.types.structure.Struct", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Struct newInstance(SModel sm) {
    return Struct.newInstance(sm, false);
  }
}
