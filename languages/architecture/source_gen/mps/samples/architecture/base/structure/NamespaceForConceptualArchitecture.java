package mps.samples.architecture.base.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class NamespaceForConceptualArchitecture extends BaseConcept implements INamedConcept {
  public static final String concept = "mps.samples.architecture.base.structure.NamespaceForConceptualArchitecture";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String NAMESPACES = "namespaces";
  public static final String COMPONENTS = "components";

  public NamespaceForConceptualArchitecture(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(NamespaceForConceptualArchitecture.NAME);
  }

  public void setName(String value) {
    this.setProperty(NamespaceForConceptualArchitecture.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(NamespaceForConceptualArchitecture.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(NamespaceForConceptualArchitecture.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(NamespaceForConceptualArchitecture.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(NamespaceForConceptualArchitecture.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(NamespaceForConceptualArchitecture.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(NamespaceForConceptualArchitecture.VIRTUAL_PACKAGE, value);
  }

  public int getNamespacesesCount() {
    return this.getChildCount(NamespaceForConceptualArchitecture.NAMESPACES);
  }

  public Iterator<NamespaceForConceptualArchitecture> namespaceses() {
    return this.children(NamespaceForConceptualArchitecture.class, NamespaceForConceptualArchitecture.NAMESPACES);
  }

  public List<NamespaceForConceptualArchitecture> getNamespaceses() {
    return this.getChildren(NamespaceForConceptualArchitecture.class, NamespaceForConceptualArchitecture.NAMESPACES);
  }

  public void addNamespaces(NamespaceForConceptualArchitecture node) {
    this.addChild(NamespaceForConceptualArchitecture.NAMESPACES, node);
  }

  public void insertNamespaces(NamespaceForConceptualArchitecture prev, NamespaceForConceptualArchitecture node) {
    this.insertChild(prev, NamespaceForConceptualArchitecture.NAMESPACES, node);
  }

  public int getComponentsesCount() {
    return this.getChildCount(NamespaceForConceptualArchitecture.COMPONENTS);
  }

  public Iterator<Component> componentses() {
    return this.children(Component.class, NamespaceForConceptualArchitecture.COMPONENTS);
  }

  public List<Component> getComponentses() {
    return this.getChildren(Component.class, NamespaceForConceptualArchitecture.COMPONENTS);
  }

  public void addComponents(Component node) {
    this.addChild(NamespaceForConceptualArchitecture.COMPONENTS, node);
  }

  public void insertComponents(Component prev, Component node) {
    this.insertChild(prev, NamespaceForConceptualArchitecture.COMPONENTS, node);
  }

  public static NamespaceForConceptualArchitecture newInstance(SModel sm, boolean init) {
    return (NamespaceForConceptualArchitecture)SModelUtil_new.instantiateConceptDeclaration("mps.samples.architecture.base.structure.NamespaceForConceptualArchitecture", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static NamespaceForConceptualArchitecture newInstance(SModel sm) {
    return NamespaceForConceptualArchitecture.newInstance(sm, false);
  }
}
