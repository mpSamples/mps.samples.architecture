package mps.samples.architecture.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class NamespaceForApplicationArchitecture extends BaseConcept implements INamedConcept {
  public static final String concept = "mps.samples.architecture.structure.NamespaceForApplicationArchitecture";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String NAMESPACES = "namespaces";
  public static final String SYSTEMS = "systems";

  public NamespaceForApplicationArchitecture(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(NamespaceForApplicationArchitecture.NAME);
  }

  public void setName(String value) {
    this.setProperty(NamespaceForApplicationArchitecture.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(NamespaceForApplicationArchitecture.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(NamespaceForApplicationArchitecture.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(NamespaceForApplicationArchitecture.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(NamespaceForApplicationArchitecture.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(NamespaceForApplicationArchitecture.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(NamespaceForApplicationArchitecture.VIRTUAL_PACKAGE, value);
  }

  public int getNamespacesesCount() {
    return this.getChildCount(NamespaceForApplicationArchitecture.NAMESPACES);
  }

  public Iterator<NamespaceForApplicationArchitecture> namespaceses() {
    return this.children(NamespaceForApplicationArchitecture.class, NamespaceForApplicationArchitecture.NAMESPACES);
  }

  public List<NamespaceForApplicationArchitecture> getNamespaceses() {
    return this.getChildren(NamespaceForApplicationArchitecture.class, NamespaceForApplicationArchitecture.NAMESPACES);
  }

  public void addNamespaces(NamespaceForApplicationArchitecture node) {
    this.addChild(NamespaceForApplicationArchitecture.NAMESPACES, node);
  }

  public void insertNamespaces(NamespaceForApplicationArchitecture prev, NamespaceForApplicationArchitecture node) {
    this.insertChild(prev, NamespaceForApplicationArchitecture.NAMESPACES, node);
  }

  public int getSystemsesCount() {
    return this.getChildCount(NamespaceForApplicationArchitecture.SYSTEMS);
  }

  public Iterator<System> systemses() {
    return this.children(System.class, NamespaceForApplicationArchitecture.SYSTEMS);
  }

  public List<System> getSystemses() {
    return this.getChildren(System.class, NamespaceForApplicationArchitecture.SYSTEMS);
  }

  public void addSystems(System node) {
    this.addChild(NamespaceForApplicationArchitecture.SYSTEMS, node);
  }

  public void insertSystems(System prev, System node) {
    this.insertChild(prev, NamespaceForApplicationArchitecture.SYSTEMS, node);
  }

  public static NamespaceForApplicationArchitecture newInstance(SModel sm, boolean init) {
    return (NamespaceForApplicationArchitecture)SModelUtil_new.instantiateConceptDeclaration("mps.samples.architecture.structure.NamespaceForApplicationArchitecture", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static NamespaceForApplicationArchitecture newInstance(SModel sm) {
    return NamespaceForApplicationArchitecture.newInstance(sm, false);
  }
}
