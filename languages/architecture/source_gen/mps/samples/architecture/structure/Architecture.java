package mps.samples.architecture.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Architecture extends BaseConcept implements INamedConcept {
  public static final String concept = "mps.samples.architecture.structure.Architecture";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String COMPONENT = "component";
  public static final String INTERFACE = "interface";

  public Architecture(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(Architecture.NAME);
  }

  public void setName(String value) {
    this.setProperty(Architecture.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Architecture.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Architecture.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Architecture.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Architecture.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Architecture.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Architecture.VIRTUAL_PACKAGE, value);
  }

  public int getComponentsCount() {
    return this.getChildCount(Architecture.COMPONENT);
  }

  public Iterator<Component> components() {
    return this.children(Component.class, Architecture.COMPONENT);
  }

  public List<Component> getComponents() {
    return this.getChildren(Component.class, Architecture.COMPONENT);
  }

  public void addComponent(Component node) {
    this.addChild(Architecture.COMPONENT, node);
  }

  public void insertComponent(Component prev, Component node) {
    this.insertChild(prev, Architecture.COMPONENT, node);
  }

  public int getInterfacesCount() {
    return this.getChildCount(Architecture.INTERFACE);
  }

  public Iterator<Interface> interfaces() {
    return this.children(Interface.class, Architecture.INTERFACE);
  }

  public List<Interface> getInterfaces() {
    return this.getChildren(Interface.class, Architecture.INTERFACE);
  }

  public void addInterface(Interface node) {
    this.addChild(Architecture.INTERFACE, node);
  }

  public void insertInterface(Interface prev, Interface node) {
    this.insertChild(prev, Architecture.INTERFACE, node);
  }

  public static Architecture newInstance(SModel sm, boolean init) {
    return (Architecture)SModelUtil_new.instantiateConceptDeclaration("mps.samples.architecture.structure.Architecture", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Architecture newInstance(SModel sm) {
    return Architecture.newInstance(sm, false);
  }
}
