package mps.samples.architecture.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Namespace extends BaseConcept implements INamedConcept {
  public static final String concept = "mps.samples.architecture.structure.Namespace";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String NAMESPACES = "namespaces";
  public static final String COMPONENTS = "components";
  public static final String SYSTEMS = "systems";

  public Namespace(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(Namespace.NAME);
  }

  public void setName(String value) {
    this.setProperty(Namespace.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Namespace.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Namespace.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Namespace.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Namespace.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Namespace.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Namespace.VIRTUAL_PACKAGE, value);
  }

  public int getNamespacesesCount() {
    return this.getChildCount(Namespace.NAMESPACES);
  }

  public Iterator<Namespace> namespaceses() {
    return this.children(Namespace.class, Namespace.NAMESPACES);
  }

  public List<Namespace> getNamespaceses() {
    return this.getChildren(Namespace.class, Namespace.NAMESPACES);
  }

  public void addNamespaces(Namespace node) {
    this.addChild(Namespace.NAMESPACES, node);
  }

  public void insertNamespaces(Namespace prev, Namespace node) {
    this.insertChild(prev, Namespace.NAMESPACES, node);
  }

  public int getComponentsesCount() {
    return this.getChildCount(Namespace.COMPONENTS);
  }

  public Iterator<Component> componentses() {
    return this.children(Component.class, Namespace.COMPONENTS);
  }

  public List<Component> getComponentses() {
    return this.getChildren(Component.class, Namespace.COMPONENTS);
  }

  public void addComponents(Component node) {
    this.addChild(Namespace.COMPONENTS, node);
  }

  public void insertComponents(Component prev, Component node) {
    this.insertChild(prev, Namespace.COMPONENTS, node);
  }

  public int getSystemsesCount() {
    return this.getChildCount(Namespace.SYSTEMS);
  }

  public Iterator<System> systemses() {
    return this.children(System.class, Namespace.SYSTEMS);
  }

  public List<System> getSystemses() {
    return this.getChildren(System.class, Namespace.SYSTEMS);
  }

  public void addSystems(System node) {
    this.addChild(Namespace.SYSTEMS, node);
  }

  public void insertSystems(System prev, System node) {
    this.insertChild(prev, Namespace.SYSTEMS, node);
  }


  public static Namespace newInstance(SModel sm, boolean init) {
    return (Namespace)SModelUtil_new.instantiateConceptDeclaration("mps.samples.architecture.structure.Namespace", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Namespace newInstance(SModel sm) {
    return Namespace.newInstance(sm, false);
  }

}
