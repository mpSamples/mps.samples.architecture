package mps.samples.architecture.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Instance extends BaseConcept implements INamedConcept {
  public static final String concept = "mps.samples.architecture.structure.Instance";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String COMPONENT = "component";

  public Instance(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(Instance.NAME);
  }

  public void setName(String value) {
    this.setProperty(Instance.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Instance.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Instance.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Instance.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Instance.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Instance.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Instance.VIRTUAL_PACKAGE, value);
  }

  public Component getComponent() {
    return (Component)this.getReferent(Component.class, Instance.COMPONENT);
  }

  public void setComponent(Component node) {
    super.setReferent(Instance.COMPONENT, node);
  }


  public static Instance newInstance(SModel sm, boolean init) {
    return (Instance)SModelUtil_new.instantiateConceptDeclaration("mps.samples.architecture.structure.Instance", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Instance newInstance(SModel sm) {
    return Instance.newInstance(sm, false);
  }

}
