package mps.samples.architecture.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class RegisteredInstance extends Instance {
  public static final String concept = "mps.samples.architecture.structure.RegisteredInstance";
  public static final String INSTANCE_REGISTRATION_PARAMETER = "instanceRegistrationParameter";

  public RegisteredInstance(SNode node) {
    super(node);
  }

  public int getInstanceRegistrationParametersCount() {
    return this.getChildCount(RegisteredInstance.INSTANCE_REGISTRATION_PARAMETER);
  }

  public Iterator<InstanceRegistrationParameter> instanceRegistrationParameters() {
    return this.children(InstanceRegistrationParameter.class, RegisteredInstance.INSTANCE_REGISTRATION_PARAMETER);
  }

  public List<InstanceRegistrationParameter> getInstanceRegistrationParameters() {
    return this.getChildren(InstanceRegistrationParameter.class, RegisteredInstance.INSTANCE_REGISTRATION_PARAMETER);
  }

  public void addInstanceRegistrationParameter(InstanceRegistrationParameter node) {
    this.addChild(RegisteredInstance.INSTANCE_REGISTRATION_PARAMETER, node);
  }

  public void insertInstanceRegistrationParameter(InstanceRegistrationParameter prev, InstanceRegistrationParameter node) {
    this.insertChild(prev, RegisteredInstance.INSTANCE_REGISTRATION_PARAMETER, node);
  }

  public static RegisteredInstance newInstance(SModel sm, boolean init) {
    return (RegisteredInstance)SModelUtil_new.instantiateConceptDeclaration("mps.samples.architecture.structure.RegisteredInstance", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static RegisteredInstance newInstance(SModel sm) {
    return RegisteredInstance.newInstance(sm, false);
  }
}
