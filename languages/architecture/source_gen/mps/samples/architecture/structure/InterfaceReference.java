package mps.samples.architecture.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class InterfaceReference extends BaseConcept implements INamedConcept {
  public static final String concept = "mps.samples.architecture.structure.InterfaceReference";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String INTERFACE = "interface";
  public static final String CARDINALITY = "cardinality";

  public InterfaceReference(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(InterfaceReference.NAME);
  }

  public void setName(String value) {
    this.setProperty(InterfaceReference.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(InterfaceReference.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(InterfaceReference.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(InterfaceReference.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(InterfaceReference.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(InterfaceReference.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(InterfaceReference.VIRTUAL_PACKAGE, value);
  }

  public Interface getInterface() {
    return (Interface)this.getReferent(Interface.class, InterfaceReference.INTERFACE);
  }

  public void setInterface(Interface node) {
    super.setReferent(InterfaceReference.INTERFACE, node);
  }

  public Cardinality getCardinality() {
    return (Cardinality)this.getChild(Cardinality.class, InterfaceReference.CARDINALITY);
  }

  public void setCardinality(Cardinality node) {
    super.setChild(InterfaceReference.CARDINALITY, node);
  }


  public static InterfaceReference newInstance(SModel sm, boolean init) {
    return (InterfaceReference)SModelUtil_new.instantiateConceptDeclaration("mps.samples.architecture.structure.InterfaceReference", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static InterfaceReference newInstance(SModel sm) {
    return InterfaceReference.newInstance(sm, false);
  }

}
