package mps.samples.architecture.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ConceptualArchitecture extends BaseConcept implements INamedConcept {
  public static final String concept = "mps.samples.architecture.structure.ConceptualArchitecture";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String NAMESPACE = "namespace";
  public static final String COMPONENT_NOT_NEEDED_ANYMORE_WITH_NAMESPACES_PAGE_7 = "component_not_needed_anymore_with_namespaces_page_7";
  public static final String INTERFACE = "interface";

  public ConceptualArchitecture(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(ConceptualArchitecture.NAME);
  }

  public void setName(String value) {
    this.setProperty(ConceptualArchitecture.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(ConceptualArchitecture.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(ConceptualArchitecture.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(ConceptualArchitecture.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(ConceptualArchitecture.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(ConceptualArchitecture.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(ConceptualArchitecture.VIRTUAL_PACKAGE, value);
  }

  public int getNamespacesCount() {
    return this.getChildCount(ConceptualArchitecture.NAMESPACE);
  }

  public Iterator<NamespaceForConceptualArchitecture> namespaces() {
    return this.children(NamespaceForConceptualArchitecture.class, ConceptualArchitecture.NAMESPACE);
  }

  public List<NamespaceForConceptualArchitecture> getNamespaces() {
    return this.getChildren(NamespaceForConceptualArchitecture.class, ConceptualArchitecture.NAMESPACE);
  }

  public void addNamespace(NamespaceForConceptualArchitecture node) {
    this.addChild(ConceptualArchitecture.NAMESPACE, node);
  }

  public void insertNamespace(NamespaceForConceptualArchitecture prev, NamespaceForConceptualArchitecture node) {
    this.insertChild(prev, ConceptualArchitecture.NAMESPACE, node);
  }

  public int getComponent_not_needed_anymore_with_namespaces_page_7sCount() {
    return this.getChildCount(ConceptualArchitecture.COMPONENT_NOT_NEEDED_ANYMORE_WITH_NAMESPACES_PAGE_7);
  }

  public Iterator<Component> component_not_needed_anymore_with_namespaces_page_7s() {
    return this.children(Component.class, ConceptualArchitecture.COMPONENT_NOT_NEEDED_ANYMORE_WITH_NAMESPACES_PAGE_7);
  }

  public List<Component> getComponent_not_needed_anymore_with_namespaces_page_7s() {
    return this.getChildren(Component.class, ConceptualArchitecture.COMPONENT_NOT_NEEDED_ANYMORE_WITH_NAMESPACES_PAGE_7);
  }

  public void addComponent_not_needed_anymore_with_namespaces_page_7(Component node) {
    this.addChild(ConceptualArchitecture.COMPONENT_NOT_NEEDED_ANYMORE_WITH_NAMESPACES_PAGE_7, node);
  }

  public void insertComponent_not_needed_anymore_with_namespaces_page_7(Component prev, Component node) {
    this.insertChild(prev, ConceptualArchitecture.COMPONENT_NOT_NEEDED_ANYMORE_WITH_NAMESPACES_PAGE_7, node);
  }

  public int getInterfacesCount() {
    return this.getChildCount(ConceptualArchitecture.INTERFACE);
  }

  public Iterator<Interface> interfaces() {
    return this.children(Interface.class, ConceptualArchitecture.INTERFACE);
  }

  public List<Interface> getInterfaces() {
    return this.getChildren(Interface.class, ConceptualArchitecture.INTERFACE);
  }

  public void addInterface(Interface node) {
    this.addChild(ConceptualArchitecture.INTERFACE, node);
  }

  public void insertInterface(Interface prev, Interface node) {
    this.insertChild(prev, ConceptualArchitecture.INTERFACE, node);
  }

  public static ConceptualArchitecture newInstance(SModel sm, boolean init) {
    return (ConceptualArchitecture)SModelUtil_new.instantiateConceptDeclaration("mps.samples.architecture.structure.ConceptualArchitecture", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ConceptualArchitecture newInstance(SModel sm) {
    return ConceptualArchitecture.newInstance(sm, false);
  }
}
