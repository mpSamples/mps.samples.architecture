package mps.samples.architecture.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class System extends BaseConcept implements INamedConcept {
  public static final String concept = "mps.samples.architecture.structure.System";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String INSTANCES = "instances";
  public static final String REGISTERED_INSTANCE = "registeredInstance";
  public static final String CONNECTIONS = "connections";
  public static final String DYNAMIC_CONNECTIONS = "dynamicConnections";

  public System(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(System.NAME);
  }

  public void setName(String value) {
    this.setProperty(System.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(System.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(System.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(System.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(System.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(System.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(System.VIRTUAL_PACKAGE, value);
  }

  public int getInstancesesCount() {
    return this.getChildCount(System.INSTANCES);
  }

  public Iterator<Instance> instanceses() {
    return this.children(Instance.class, System.INSTANCES);
  }

  public List<Instance> getInstanceses() {
    return this.getChildren(Instance.class, System.INSTANCES);
  }

  public void addInstances(Instance node) {
    this.addChild(System.INSTANCES, node);
  }

  public void insertInstances(Instance prev, Instance node) {
    this.insertChild(prev, System.INSTANCES, node);
  }

  public int getRegisteredInstancesCount() {
    return this.getChildCount(System.REGISTERED_INSTANCE);
  }

  public Iterator<RegisteredInstance> registeredInstances() {
    return this.children(RegisteredInstance.class, System.REGISTERED_INSTANCE);
  }

  public List<RegisteredInstance> getRegisteredInstances() {
    return this.getChildren(RegisteredInstance.class, System.REGISTERED_INSTANCE);
  }

  public void addRegisteredInstance(RegisteredInstance node) {
    this.addChild(System.REGISTERED_INSTANCE, node);
  }

  public void insertRegisteredInstance(RegisteredInstance prev, RegisteredInstance node) {
    this.insertChild(prev, System.REGISTERED_INSTANCE, node);
  }

  public int getConnectionsesCount() {
    return this.getChildCount(System.CONNECTIONS);
  }

  public Iterator<Connection> connectionses() {
    return this.children(Connection.class, System.CONNECTIONS);
  }

  public List<Connection> getConnectionses() {
    return this.getChildren(Connection.class, System.CONNECTIONS);
  }

  public void addConnections(Connection node) {
    this.addChild(System.CONNECTIONS, node);
  }

  public void insertConnections(Connection prev, Connection node) {
    this.insertChild(prev, System.CONNECTIONS, node);
  }

  public int getDynamicConnectionsesCount() {
    return this.getChildCount(System.DYNAMIC_CONNECTIONS);
  }

  public Iterator<DynamicConnection> dynamicConnectionses() {
    return this.children(DynamicConnection.class, System.DYNAMIC_CONNECTIONS);
  }

  public List<DynamicConnection> getDynamicConnectionses() {
    return this.getChildren(DynamicConnection.class, System.DYNAMIC_CONNECTIONS);
  }

  public void addDynamicConnections(DynamicConnection node) {
    this.addChild(System.DYNAMIC_CONNECTIONS, node);
  }

  public void insertDynamicConnections(DynamicConnection prev, DynamicConnection node) {
    this.insertChild(prev, System.DYNAMIC_CONNECTIONS, node);
  }


  public static System newInstance(SModel sm, boolean init) {
    return (System)SModelUtil_new.instantiateConceptDeclaration("mps.samples.architecture.structure.System", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static System newInstance(SModel sm) {
    return System.newInstance(sm, false);
  }

}
